<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
  <!ENTITY version SYSTEM "version.xml">
]>
<book id="index">
  <bookinfo>
    <title>CTPL Reference Manual</title>
    <releaseinfo>
      for CTPL &version;
      The latest version of this documentation can be found on-line at
      <ulink role="online-location" url="http://ctpl.tuxfamily.org/doc/unstable/index.html">http://ctpl.tuxfamily.org/doc/unstable/</ulink>.
    </releaseinfo>
  </bookinfo>

  <chapter>
    <title>CTPL overview</title>
    
    <section>
      <title>Introduction</title>
      <para>
        CTPL is a template library written in C. It allows fast and easy parsing
        of templates from many sources (including in-memory data and local and
        remote streaming, thanks to GIO) and fine control over template parsing
        environment.
      </para>
      <para>
        CTPL depends on the following libraries:
        <variablelist>
          <varlistentry>
            <term><ulink url="http://library.gnome.org/devel/glib/">GLib</ulink></term>
            <listitem>
              <para>
                General purpose C utility library
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><ulink url="http://library.gnome.org/devel/gio/">GIO</ulink></term>
            <listitem>
              <para>
                GLib's I/O abstraction library
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
      
      <section>
        <title>Advantages and disadvantages</title>
        
        <section>
          <title>Advantages</title>
          <itemizedlist>
            <listitem>
              <para>
                It is a library, then it can be easily used from programs;
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="working-design">Separated lexer and parser</link>;
              </para>
            </listitem>
            <listitem>
              <para>
                It is written in portable C;
              </para>
            </listitem>
            <listitem>
              <para>
                Simple syntax;
              </para>
            </listitem>
            <listitem>
              <para>
                Fast and strict parsing;
              </para>
            </listitem>
            <listitem>
              <para>
                Possible in-memory parsing, allowing non-file data parsing and
                avoiding I/O-latency, through GIO's
                <link linkend="GMemoryInputStream">GMemoryInputStream</link> and
                <link linkend="GMemoryOutputStream">GMemoryOutputStream</link>.
              </para>
            </listitem>
          </itemizedlist>
        </section>
        
        <section>
          <title>Disadvantages</title>
          <itemizedlist>
            <listitem>
              <para>
                Since the input is first completely loaded as a token tree in
                memory -- which is also one of the advantages -- , it may
                consume a little more memory than the input template size.
              </para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
    </section>
    
    <section>
      <title id="working-design">Working design</title>
      <para>
        The CTPL engine is split, as most parsers, in two distinct parts:
        the lexer and the parser.
      </para>
      <section>
        <title>The lexer</title>
        <para>
          The <link linkend="ctpl-CtplLexer">lexer</link> is the part that reads
          the actual input data, and tries to create a
          <link linkend="ctpl-CtplToken">token</link> tree (internal
          representation of the input) that the
          <link linkend="ctpl-CtplParser">parser</link> will use.
        </para>
      </section>
      <section>
        <title>The parser</title>
        <para>
          The parser reads a <link linkend="ctpl-CtplToken">token</link> tree
          and an <link linkend="ctpl-CtplEnviron">environment</link>, and
          outputs the computed template.
        </para>
      </section>
      <para>
        By exposing this separation of the tasks to the user, it is possible
        to <link linkend="ctpl-CtplParser">parse</link> a single template many
        times with a different environment without needing to
        re-<link linkend="ctpl-CtplLexer">lex</link> it, which will save
        computation time and resources.
      </para>
      <example>
        <title>Using the library to lex and parse a template</title>
        <programlisting>
#include &lt;ctpl/ctpl.h&gt;

/**
 * process_template:
 * @input:  The input stream
 * @env:    The environment against which parse the input.
 * @output: The output stream
 * @error:  Return location for an error, or %NULL to ignore them.
 * 
 * Parses and lexes a template.
 * 
 * Returns: %TRUE on success, %FALSE on error.
 */
gboolean
process_template (CtplInputStream  *input,
                  CtplEnviron      *env,
                  CtplOutputStream *output,
                  GError          **error)
{
  gboolean    success = FALSE;
  CtplToken  *tree;
  
  /* first, create a token tree from the input template */
  tree = ctpl_lexer_lex (input, error);
  if (tree != NULL) {
    /* then, parse this tree against the environment */
    success = ctpl_parser_parse (tree, env, output, error);
    /* and finally, free the built tree */
    ctpl_lexer_free_tree (tree);
  }
  
  return success;
}
        </programlisting>
      </example>
    </section>
    
    <section>
      <title>Templates syntax</title>
      <para>
        CTPL supports 2 kinds of data:
        <variablelist>
          <varlistentry>
            <term><link linkend="raw-data">Raw data</link></term>
            <listitem>
              <para>
                The actual content of your template, or at least most of it:
                unparsed data that will remain (almost) unchanged.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><link linkend="template-blocks">Template blocks</link></term>
            <listitem>
              <para>
                The instructions that makes the template engine useful.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
      <section id="raw-data">
        <title>Raw data</title>
        <para>
          There is no syntax for the raw data: everything that is not a
          template block is raw data. The only exception to this rule is that
          the template-blocks-delimiters <code>{</code> and <code>}</code>
          must be escaped using a backslash (<code>\</code>), as well as
          backslashes themselves. For example, to produce an opening bracket,
          you need to write <code>\{</code>, and to produce a backslash you need
          to write it twice: <code>\\</code> (the first one escapes the second).
        </para>
        <note>
          <para>
            Even if escaping a character that doesn't need to be escaped works
            perfectly (thought the escaping backslash doesn't appear), it is
            recommended not to do so in order to allow future addition of new
            escaping sequences without changes on your template's output.
          </para>
        </note>
      </section>
      <section id="template-blocks">
        <title>Template blocks</title>
        <para>
          Template blocks are delimited with brackets: they are opened with an
          unescaped opening bracket (<code>{</code>) and closed with an
          unescaped closing bracket (<code>}</code>). All data inside these two
          brackets is template instructions.
        </para>
        <para>
          There are 3 instruction types:
          <variablelist>
            <varlistentry>
              <term>The <code>for</code> loop</term>
              <listitem>
                <para>
                  The <code>for</code> loop allows to iterate over an expression
                  that expands to an array, and computes the loop body for each
                  element in that array.
                </para>
                <para>
                  The syntax is the following:
                  <informalexample>
                    <programlisting>
{for &lt;iterator&gt; in &lt;expression&gt;}&lt;loop body&gt;{end}
                    </programlisting>
                  </informalexample>
                  <code>iterator</code> is the variable name referring to
                  the current array's element;
                  <code>expression</code> is an expression (see below) that expands
                  to the array over which iterate;
                  <code>loop body</code> is the data that will be evaluated on
                  each iteration of the loop, and may contain any elements
                  (raw data or instructions).
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>The <code>if</code> switch</term>
              <listitem>
                <para>
                  The <code>if</code> block is a conditional branching.
                </para>
                <para>
                  The syntax is the following:
                  <informalexample>
                    <programlisting>
{if &lt;expression&gt;}&lt;if body&gt;[{else}&lt;else body&gt;]{end}
                    </programlisting>
                  </informalexample>
                  <code>expression</code> is an expression (see below) that will
                  be evaluated to a boolean value,
                  <code>TRUE</code> or <code>FALSE</code>.
                </para>
                <para>
                  If the <code>expression</code> evaluates to <code>TRUE</code>,
                  the <code>if body</code> will be parsed.
                  If the <code>expression</code> evaluates to <code>FALSE</code>,
                  the <code>else body</code> will be parsed if any, or nothing
                  will be done if the <code>else</code> is missing.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>An expression</term>
              <listitem>
                <para>
                  An expression that will be replaced by its computation result.
                </para>
                <para>
                  See <link linkend="ctpl-CtplLexerExpr">CtplLexerExpr</link>
                  for details on the syntax of expressions. Basically, it may be
                  any mathematical-like expression that may include reference(s)
                  to variable(s). Variable can also be indexed with a C-like
                  syntax if they expand to an indexable type (basically, an
                  array). The index expression must expand to an integer or
                  compatible.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
      </section>
      
      <section>
        <title>Examples</title>
        <example>
          <title>Short template</title>
          <para>
            <informalexample>
              <programlisting>
{for i in array}
  {i}
{end}
              </programlisting>
            </informalexample>
            This example will output each item of <code>array</code> on a
            newline. Supposing the array <code>[1, 2, 3]</code>, the output will
            be:
            <informalexample>
              <programlisting>

&nbsp;&nbsp;1

&nbsp;&nbsp;2

&nbsp;&nbsp;3

              </programlisting>
            </informalexample>
          </para>
        </example>
        
        <example>
          <title>Longer template</title>
          <para>
            Here what may be a template for a member list HTML page:
            <informalexample>
              <programlisting>
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Member list&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;List of our members&lt;h1&gt;
    &lt;ul class="memberlist"&gt;
    {for member in members}
      &lt;li&gt;{member}&lt;/li&gt;
    {end}
    &lt;/ul&gt;
  &lt;/body&gt;
&lt;/html&gt;
              </programlisting>
            </informalexample>
          </para>
        </example>
        
        <example>
          <title>Array indexation</title>
          <para>
            <informalexample>
              <programlisting>
{array[2]}
              </programlisting>
            </informalexample>
            This example will output the 3rd element (array indexes starts at
            zero) of the array named <code>array</code>.
          </para>
        </example>
      </section>
    </section>
      
    <section id="environment-description-syntax">
      <title>Environment description syntax</title>
      <para>
        The environment descriptions (that can be read by
        <link linkend="ctpl-environ-add-from-stream">ctpl_environ_add_from_stream()</link>
        and friends) contains any number of symbol-value pairs that have the
        following syntax:
        <informalexample>
          <programlisting>
            &lt;symbol&gt; = &lt;value&gt;;
          </programlisting>
        </informalexample>
        where <code>&lt;symbol&gt;</code> is a
        <link linkend="environment-description-syntax-symbol">valid
        symbol</link> and <code>&lt;value&gt;</code> is a
        <link linkend="environment-description-syntax-value">valid value</link>.
        Apart the four required parts (symbol, equal sign, value, semicolon),
        there can be any number of
        <link linkend="environment-description-syntax-blank">blank
        characters</link> and
        <link linkend="environment-description-syntax-comment">comments</link>
        before, between and after them.
      </para>
      
      <section id="environment-description-syntax-symbol">
        <title>Symbol</title>
        <para>
          The symbol part is composed of any alphanumeric characters and
          underscore, repeated any number of times.
        </para>
      </section>
      
      <section id="environment-description-syntax-value">
        <title>Value</title>
        <para>
          There are 3 supported value types:
          <itemizedlist>
            <listitem>
              <para>
                Numbers, as read by
                <link linkend="ctpl-input-stream-read-number">ctpl_input_stream_read_number()</link>.
              </para>
            </listitem>
            <listitem>
              <para>
                Strings, as read by
                <link linkend="ctpl-input-stream-read-string-literal">ctpl_input_stream_read_string_literal()</link>.
              </para>
            </listitem>
            <listitem>
              <para>
                Arrays of any of these 3 types of values. Arrays start with an
                opening square bracket (<code>[</code>) and end with a closing
                square bracket (<code>]</code>). The values in the array are
                separated by a comma (<code>,</code>).
                There can be any number of values (but at least one), which may
                be of any type, including arrays as well.
              </para>
              <example>
                <title>A sample array</title>
                <programlisting>
                  [1, 2, 3, "more", [42, 84, 126]]
                </programlisting>
              </example>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      
      <section id="environment-description-syntax-blank">
        <title>Blanks</title>
        <para>
          Blank characters are not interpreted and may appear anywhere
          nothing is expected, e.g. between the identifier and the equal sign.
          The blank characters are space, tab, vertical tab, newline and
          carriage return.
        </para>
      </section>
      
      <section id="environment-description-syntax-comment">
        <title>Comments</title>
        <para>
          Comments are special segments that don't get interpreted. Such
          segments start with a number sign (<code>#</code>) that is not part
          of any other construct (such as a string literal), and ends at the
          following end of line.
        </para>
        <para>
          Comments can be useful to add extra information to explain an element,
          to separate different parts or to disable a part of the description
          without actually removing it.
        </para>
        <example>
          <title>A small comment</title>
          <programlisting>
            # This is a comment
          </programlisting>
        </example>
      </section>
      
      <example>
        <title>An environment description example</title>
        <programlisting>
# This is an example that shows some environment description syntax.
# It does not show everything (there are more supported numeric constructs for
# example), but it covers a pretty good part of it.

foo         = "string value";
# This is a comment
bar         = 42; # An important number!
str         = "a more
               complex\" string";
array       = [1, 2, "hello", ["world", "dolly"]];
real_number = 2.12e-9;
hex_number  = 0xffe2; # 65506
        </programlisting>
      </example>
    </section>
    
    <section>
      <title>Input and output encoding</title>
      <para>
        CTPL does no encoding conversion magic for you. The main reason for this
        is that it's a complex task to handle encodings properly, and it has a
        cost in performances. Moreover, CTPL can (should) work with any
        US-ASCII-compatible encoding, which includes UTF-8, ISO-8859-*, and many
        others &mdash; but not UTF-16, UTF-32 and a few others.
      </para>
      <para>
        Since CTPL will not convert anything for you, you must ensure that
        the encoding of the input template and the environment are the same to
        avoid mixed encodings in the output.
      </para>
      <para>
        To convert the input data, you can use a
        <link linkend="GConverterInputStream">GConverterInputStream</link>
        and/or
        a <link linkend="GConverterOutputStream">GConverterOutputStream</link>
        together with a
        <link linkend="GCharsetConverter">GCharsetConverter</link> as the input
        or output source to do an implicit charset conversion directly on reads
        and/or writes.
        You can of course also do a manual conversion, with
        <link linkend="g-convert">g_convert()</link> or
        <link linkend="g-iconv">g_iconv()</link> for example.
      </para>
      <para>
        The recommended encoding for the data to pass to CTPL is UTF-8, but, as
        said above, any US-ASCII-compatible encoding should work perfectly
        fine.
      </para>
    </section>
  </chapter>

  <chapter>
    <title><type>GValue</type> integration</title>
    
    <section>
      <title>Introduction</title>
      <para>
        To improve integration with language bindings, several APIs expecting a
        <link linkend="CtplValue"><type>CtplValue</type></link> have a
        counterpart taking a <link linkend="GValue"><type>GValue</type></link>.
        This extra API is less optimized than the primary one as the
        <link linkend="GValue"><type>GValue</type></link>s are converted back and
        forth (<link linkend="CtplValue"><type>CtplValue</type></link> remains
        the internally used type).
      </para>
    </section>
    
    <section>
      <title>Type correspondence</title>
      <table>
        <tr>
          <th><link linkend="CtplValueType">CTPL type</link> ID</th>
          <th><link linkend="GType">GLib type</link> ID</th>
          <th>Vala-like type</th>
          <th>Details</th>
        </tr>
        <tr>
          <td>CTPL_VTYPE_INT</td>
          <td>G_TYPE_LONG</td>
          <td>long</td>
          <td></td>
        </tr>
        <tr>
          <td>CTPL_VTYPE_FLOAT</td>
          <td>G_TYPE_DOUBLE</td>
          <td>double</td>
          <td></td>
        </tr>
        <tr>
          <td>CTPL_VTYPE_STRING</td>
          <td>G_TYPE_STRING</td>
          <td>string</td>
          <td>C string</td>
        </tr>
        <tr>
          <td>CTPL_VTYPE_ARRAY</td>
          <td>G_TYPE_PTR_ARRAY</td>
          <td>GPtrArray&lt;GValue&gt;</td>
          <td>Element type is <link linkend="GValue"><type>GValue</type></link></td>
        </tr>
      </table>
    </section>
  </chapter>

  <chapter>
    <title>API reference</title>
    <xi:include href="xml/version.xml"/>
    <xi:include href="xml/value.xml"/>
    <xi:include href="xml/environ.xml"/>
    <xi:include href="xml/token.xml"/>
    <xi:include href="xml/lexer.xml"/>
    <xi:include href="xml/lexer-expr.xml"/>
    <xi:include href="xml/parser.xml"/>
    <xi:include href="xml/eval.xml"/>
    <xi:include href="xml/io.xml"/>
    <xi:include href="xml/input-stream.xml"/>
    <xi:include href="xml/output-stream.xml"/>
  </chapter>
  <!--chapter id="object-tree">
    <title>Object Hierarchy</title>
     <xi:include href="xml/tree_index.sgml"/>
  </chapter-->
  <index id="api-index-full">
    <title>API Index</title>
    <xi:include href="xml/api-index-full.xml"><xi:fallback /></xi:include>
  </index>
  <index id="api-index-deprecated">
    <title>Deprecated API Index</title>
    <xi:include href="xml/api-index-deprecated.xml"><xi:fallback /></xi:include>
  </index>

  <xi:include href="xml/annotation-glossary.xml"><xi:fallback /></xi:include>
</book>
