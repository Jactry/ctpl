General Information
===================

This is CTPL version @VERSION@. CTPL (which stands for C Template (Parser)
Library) is a template engine library written in C and distributed under the
terms of the GNU GPL. It allows fast and easy parsing of templates and fine
control over template parsing environment.

More information can be found on-line at the official website:
  http://ctpl.tuxfamily.org/

Installation
============

You need the following packages to build CTPL:
 - libglib (http://www.gtk.org/)
 - libgio (http://www.gtk.org/)
 - pkg-config (http://www.freedesktop.org/software/pkgconfig/)
 - A working C compiler (GCC for example, http://gcc.gnu.org/)
 - A make utility (GNU make (http://www.gnu.org/software/make) is recommended)

You may also want the following packages that enables extra features:
 - gio-unix GIO module (http://www.gtk.org/) is needed for the ctpl command-line
   tool. It generally comes together with GIO on platforms that supports it.
 - gtk-doc (http://www.gtk.org/) if you want to (re)build the documentation

For detailed installation instructions, see the INSTALL file.

If you are working on Windows, you may want to consider using the alternate
build system, see below.


Alternate installation, Waf
===========================

There is an alternate build system that use Waf (http://code.google.com/p/waf/).
This build system is not very well supported and have some lacks but it is easy
to use on MS Windows where Autotools-based build systems are often harder to get
working.

Dependencies with this build system are the same than with the standard one,
except that Make is not needed, but you need Python >= 2.4
(http://www.python.org).

Everything (should) work, except building the documentation from source.
Documentation can be installed if it is already build, but it cannot be
generated from sources for now. You then either need to generate it with the
standard build system or to get it pre-generated (it can be found pre-generated
in release tarballs) if you want it.

To configure, build and install CTPL with the Waf build system, do the
following (on Windows, prefix with the path to Python):
  ./waf configure --prefix=/where/you/want/to/install
  ./waf build
  # Gain administrator rights if needed
  ./waf install
